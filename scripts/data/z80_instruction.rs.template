use std::fmt;
use std::fmt::Display;

use crate::emu_lib::cpu::{BaseInstruction, ExecutableInstruction, InstructionCommon};
use crate::emu_lib::cpu::z80::Z80;
use crate::emu_lib::memory::Memory;

pub struct %INSTRUCTION% {
    common: InstructionCommon,
}

impl %INSTRUCTION% {
    pub fn new(memory: &Memory, pos: u16) -> %INSTRUCTION% {
        %INSTRUCTION% {
            common: InstructionCommon {
                length: PLACEHOLDER,
                cycles: PLACEHOLDER,
                increment_pc: true,
            },
        }
    }
}

impl Display for %INSTRUCTION% {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        unimplemented!()
        // write!(f, "{}", "")
    }
}

impl BaseInstruction for %INSTRUCTION% {
    fn common(&self) -> &InstructionCommon {
        &self.common
    }
    fn to_bytes(&self) -> Vec<u8> {
            let nn_lsb = self.nn.to_le_bytes();
            vec![0x01, nn_lsb[0], nn_lsb[1]]
        }
}

impl ExecutableInstruction<Z80> for %INSTRUCTION% {
    fn execute(&self, _memory: &mut Memory, cpu: &mut Z80) -> Result<(), String> {
        unimplemented!()
    }
}